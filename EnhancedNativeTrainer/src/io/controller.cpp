#include "..\io\keyboard.h"
#include "..\features\script.h"
#include "..\debug\debuglog.h"
#include "..\io\controller.h"

bool IsControllerButtonDown(int inputGroup, int buttonIndex)
{
	if (is_controller_ignored_in_trainer())
		return false;

	if (CONTROLS::IS_CONTROL_JUST_PRESSED(inputGroup, buttonIndex))
	{
		set_status_text("Control just pressed!!");
		return true;
	}

	return false;
}

bool IsControllerButtonJustUp(int inputGroup, int buttonIndex)
{
	if (is_controller_ignored_in_trainer())
		return false;

	if (CONTROLS::IS_CONTROL_JUST_RELEASED(inputGroup, buttonIndex))
	{
		set_status_text("Control just released!");
		return true;
	}

	return false;
}

bool isUsingController()
{
	return !CONTROLS::_IS_INPUT_DISABLED(2);
}

void disableControls()
{
	if (!isUsingController())
	{
		UI::HIDE_HELP_TEXT_THIS_FRAME();
		CAM::SET_CINEMATIC_BUTTON_ACTIVE(1);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_LOOK_BEHIND, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_NEXT_CAMERA, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_SELECT_NEXT_WEAPON, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_CIN_CAM, TRUE);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_ACCEPT);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_CANCEL);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_HUD_SPECIAL, TRUE);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_DOWN);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_UP);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_LEFT);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_RIGHT);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_ACCEPT, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_CANCEL, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_LEFT, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_RIGHT, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_DOWN, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_UP, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_ACCEPT, TRUE);
		UI::HIDE_HUD_COMPONENT_THIS_FRAME(10);
		UI::HIDE_HUD_COMPONENT_THIS_FRAME(6);
		UI::HIDE_HUD_COMPONENT_THIS_FRAME(7);
		UI::HIDE_HUD_COMPONENT_THIS_FRAME(9);
		UI::HIDE_HUD_COMPONENT_THIS_FRAME(8);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_FRANKLIN, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_MICHAEL, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_TREVOR, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_MULTIPLAYER, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_CHARACTER_WHEEL, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_CANCEL, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_SELECT, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_UP, TRUE);
		CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_DOWN, TRUE);
		return;
	}

	UI::HIDE_HELP_TEXT_THIS_FRAME();
	CAM::SET_CINEMATIC_BUTTON_ACTIVE(1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_NEXT_CAMERA, TRUE);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_X);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_ACCEPT);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_CANCEL);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_HUD_SPECIAL, TRUE);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_DOWN);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_UP);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_SELECT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_ACCEPT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_CANCEL, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_LEFT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_RIGHT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_DOWN, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_UP, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_RDOWN, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_FRONTEND_ACCEPT, TRUE);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(10);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(6);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(7);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(9);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(8);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_LEFT);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, INPUT_FRONTEND_RIGHT);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_UNARMED, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_MELEE, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_HANDGUN, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_SHOTGUN, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_SMG, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_AUTO_RIFLE, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_SNIPER, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_HEAVY, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_WEAPON_SPECIAL, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_WEAPON_WHEEL_NEXT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_WEAPON_WHEEL_PREV, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_WEAPON_SPECIAL, 1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_WEAPON_SPECIAL_TWO, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_DIVE, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_MELEE_ATTACK_LIGHT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_MELEE_ATTACK_HEAVY, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_MELEE_BLOCK, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_ARREST, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_HEADLIGHT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_RADIO_WHEEL, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_CONTEXT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_RELOAD, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_CIN_CAM, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_JUMP, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_SELECT_NEXT_WEAPON, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_FLY_SELECT_NEXT_WEAPON, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_FRANKLIN, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_MICHAEL, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_TREVOR, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SELECT_CHARACTER_MULTIPLAYER, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_CHARACTER_WHEEL, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_CANCEL, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_SELECT, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_UP, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_CELLPHONE_DOWN, TRUE);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_DETONATE, 1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_SPRINT, 1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_DUCK, 1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_HEADLIGHT, 1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_PUSHBIKE_SPRINT, 1);
	CONTROLS::DISABLE_CONTROL_ACTION(0, INPUT_VEH_PUSHBIKE_PEDAL, 1);
}